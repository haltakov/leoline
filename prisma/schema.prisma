generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatUserId String?
  chatUser   ChatUser? @relation(fields: [chatUserId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model AnonymousUser {
  id String @id @default(cuid())

  name            String
  localIdentifier String @unique
  ipAddressHash   String @unique

  ipAddressLocation String?

  chatUserId String
  chatUser   ChatUser @relation(fields: [chatUserId], references: [id])
}

model ChatUser {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId            String?
  stripeSubscriptionId        String?
  stripeSubscriptionStatus    String?
  stripeSubscriptionPlanId    String?
  stripeSubscriptionCreatedAt DateTime?

  Story Story[]

  User          User[]
  AnonymousUser AnonymousUser[]
}

model Story {
  id String @id @default(cuid())

  prompt   String
  chapters Int
  isScary  Boolean
  language String

  outline    String?
  text       String?
  tokensUsed Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCompleted Boolean   @default(false)
  abortedAt   DateTime?

  chatUserId String
  chatUser   ChatUser @relation(fields: [chatUserId], references: [id])
}
